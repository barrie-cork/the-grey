name: Code Quality Analysis

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/local.txt
        pip install bandit semgrep autoflake black isort mypy
    
    - name: Run Quality Analysis
      run: |
        python -m quality.main --format json > quality-report.json
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
    
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.json
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
          
          let comment = '## 📊 Code Quality Report\n\n';
          
          // Summary
          comment += `**Total Issues**: ${report.total_issues}\n`;
          comment += `- 🔴 Errors: ${report.errors}\n`;
          comment += `- 🟡 Warnings: ${report.warnings}\n`;
          comment += `- 🔵 Info: ${report.info}\n\n`;
          
          // Top issues
          if (report.issues.length > 0) {
            comment += '### Top Issues\n\n';
            report.issues.slice(0, 5).forEach(issue => {
              const emoji = issue.severity === 'error' ? '🔴' : 
                           issue.severity === 'warning' ? '🟡' : '🔵';
              comment += `${emoji} **${issue.file}:${issue.line}** - ${issue.message}\n`;
            });
            
            if (report.issues.length > 5) {
              comment += `\n... and ${report.issues.length - 5} more issues\n`;
            }
          } else {
            comment += '✅ **No issues found!**\n';
          }
          
          // Metrics
          comment += '\n### Metrics\n\n';
          comment += `- **Files Analyzed**: ${report.files_analyzed}\n`;
          comment += `- **Analysis Time**: ${report.analysis_time}s\n`;
          comment += `- **Auto-fixable Issues**: ${report.fixable_issues}\n`;
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail if critical issues
      run: |
        if [ $(jq '.errors' quality-report.json) -gt 0 ]; then
          echo "❌ Critical issues found!"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit Security Scan
      uses: gaurav-nelson/bandit-action@v1
      with:
        path: "apps/"
        level: "medium"
        confidence: "medium"
        exit_zero: false
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/django
          p/python

  auto-fix:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: quality-check
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event.pull_request.head.ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        pip install -r requirements/local.txt
        pip install autoflake black isort
    
    - name: Auto-fix Issues
      run: |
        # Remove unused imports
        autoflake --remove-all-unused-imports --in-place --recursive apps/
        
        # Format code
        black apps/ --line-length 120
        
        # Sort imports
        isort apps/ --profile django
        
        # Run custom fixes
        python -m quality.main --fix --auto-commit
    
    - name: Commit fixes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🤖 Auto-fix code quality issues"
          git push
        fi