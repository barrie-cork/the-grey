# Generated by Django 4.2.11 on 2025-07-25 01:17

import uuid

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("review_manager", "0001_initial"),
        ("serp_execution", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DuplicateGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        help_text="The primary URL for this group", max_length=2048
                    ),
                ),
                (
                    "similarity_type",
                    models.CharField(
                        choices=[
                            ("exact_url", "Exact URL Match"),
                            ("normalized_url", "Normalized URL Match"),
                            ("title_match", "Title Match"),
                            ("content_hash", "Content Hash Match"),
                            ("fuzzy_match", "Fuzzy Match"),
                        ],
                        help_text="How duplicates were identified",
                        max_length=50,
                    ),
                ),
                (
                    "result_count",
                    models.IntegerField(
                        default=0, help_text="Number of results in this group"
                    ),
                ),
                (
                    "sources",
                    models.JSONField(
                        default=list, help_text="List of search engines that found this"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "session",
                    models.ForeignKey(
                        help_text="The search session these duplicates belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="duplicate_groups",
                        to="review_manager.searchsession",
                    ),
                ),
            ],
            options={
                "db_table": "duplicate_groups",
                "ordering": ["-result_count"],
            },
        ),
        migrations.CreateModel(
            name="ProcessedResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.TextField(help_text="Cleaned and normalized title")),
                ("url", models.URLField(help_text="Canonical URL", max_length=2048)),
                (
                    "snippet",
                    models.TextField(
                        blank=True, help_text="Cleaned snippet or abstract"
                    ),
                ),
                (
                    "authors",
                    models.JSONField(
                        blank=True, default=list, help_text="List of author names"
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True, help_text="Extracted publication date", null=True
                    ),
                ),
                (
                    "publication_year",
                    models.IntegerField(
                        blank=True,
                        help_text="Publication year for easier filtering",
                        null=True,
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of document (report, thesis, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en", help_text="Document language code", max_length=10
                    ),
                ),
                (
                    "source_organization",
                    models.CharField(
                        blank=True, help_text="Publishing organization", max_length=255
                    ),
                ),
                (
                    "has_full_text",
                    models.BooleanField(
                        default=False, help_text="Whether full text is available"
                    ),
                ),
                (
                    "full_text_url",
                    models.URLField(
                        blank=True,
                        help_text="Direct link to full text (PDF, etc.)",
                        max_length=2048,
                    ),
                ),
                (
                    "is_pdf",
                    models.BooleanField(
                        default=False, help_text="Whether the result is a PDF"
                    ),
                ),
                (
                    "file_size_bytes",
                    models.BigIntegerField(
                        blank=True, help_text="File size if known", null=True
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        blank=True,
                        help_text="Calculated relevance score (0-1)",
                        null=True,
                    ),
                ),
                (
                    "quality_indicators",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Quality indicators (e.g., peer_reviewed, has_doi)",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this result was processed"
                    ),
                ),
                (
                    "processing_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of processing algorithm used",
                        max_length=20,
                    ),
                ),
                (
                    "is_reviewed",
                    models.BooleanField(
                        default=False, help_text="Whether this result has been reviewed"
                    ),
                ),
                (
                    "review_priority",
                    models.IntegerField(
                        default=0,
                        help_text="Priority for review (higher = more important)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "duplicate_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Group of duplicate results",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="results",
                        to="results_manager.duplicategroup",
                    ),
                ),
                (
                    "raw_result",
                    models.ForeignKey(
                        blank=True,
                        help_text="The original raw result this was processed from",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_version",
                        to="serp_execution.rawsearchresult",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        help_text="The search session this result belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processed_results",
                        to="review_manager.searchsession",
                    ),
                ),
            ],
            options={
                "db_table": "processed_results",
                "ordering": ["-relevance_score", "-publication_date"],
            },
        ),
        migrations.CreateModel(
            name="ResultMetadata",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "doi",
                    models.CharField(
                        blank=True,
                        help_text="Digital Object Identifier",
                        max_length=255,
                    ),
                ),
                (
                    "isbn",
                    models.CharField(
                        blank=True, help_text="ISBN for books", max_length=20
                    ),
                ),
                (
                    "issn",
                    models.CharField(
                        blank=True, help_text="ISSN for journals", max_length=20
                    ),
                ),
                (
                    "keywords",
                    models.JSONField(
                        blank=True, default=list, help_text="Extracted keywords"
                    ),
                ),
                (
                    "abstract",
                    models.TextField(
                        blank=True, help_text="Full abstract if available"
                    ),
                ),
                (
                    "funding_info",
                    models.TextField(blank=True, help_text="Funding information"),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="Country of origin", max_length=100
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True, help_text="Geographic region", max_length=100
                    ),
                ),
                (
                    "subject_areas",
                    models.JSONField(
                        blank=True, default=list, help_text="Subject classification"
                    ),
                ),
                (
                    "methodology",
                    models.CharField(
                        blank=True,
                        help_text="Research methodology if identified",
                        max_length=100,
                    ),
                ),
                (
                    "access_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("open_access", "Open Access"),
                            ("restricted", "Restricted Access"),
                            ("subscription", "Subscription Required"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Access restrictions",
                        max_length=50,
                    ),
                ),
                (
                    "license",
                    models.CharField(
                        blank=True, help_text="License information", max_length=100
                    ),
                ),
                (
                    "extraction_confidence",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Confidence scores for extracted fields",
                    ),
                ),
                (
                    "extraction_method",
                    models.CharField(
                        blank=True,
                        help_text="Method used for metadata extraction",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "result",
                    models.OneToOneField(
                        help_text="The result this metadata belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metadata",
                        to="results_manager.processedresult",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Result metadata",
                "db_table": "result_metadata",
            },
        ),
        migrations.AddIndex(
            model_name="processedresult",
            index=models.Index(
                fields=["session", "is_reviewed"], name="processed_r_session_ad5900_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processedresult",
            index=models.Index(fields=["url"], name="processed_r_url_d3d2e0_idx"),
        ),
        migrations.AddIndex(
            model_name="processedresult",
            index=models.Index(
                fields=["publication_year"], name="processed_r_publica_51096c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processedresult",
            index=models.Index(
                fields=["document_type"], name="processed_r_documen_295624_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="processedresult",
            index=models.Index(
                fields=["relevance_score"], name="processed_r_relevan_c7948c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="duplicategroup",
            index=models.Index(
                fields=["session", "canonical_url"],
                name="duplicate_g_session_ff3512_idx",
            ),
        ),
    ]
