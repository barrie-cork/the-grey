# Generated by Django 4.2.11 on 2025-07-25 01:17

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("results_manager", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ReviewTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Tag name", max_length=50, unique=True),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the name", unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this tag represents"
                    ),
                ),
                (
                    "tag_type",
                    models.CharField(
                        choices=[
                            ("quality", "Quality Indicator"),
                            ("methodology", "Methodology"),
                            ("topic", "Topic/Theme"),
                            ("relevance", "Relevance"),
                            ("custom", "Custom"),
                        ],
                        default="custom",
                        help_text="Type of tag",
                        max_length=20,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6c757d",
                        help_text="Hex color code for display",
                        max_length=7,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon class for display (e.g., 'fa-star')",
                        max_length=50,
                    ),
                ),
                (
                    "is_system",
                    models.BooleanField(
                        default=False, help_text="Whether this is a system-defined tag"
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this tag has been used"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this tag",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "review_tags",
                "ordering": ["tag_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="ReviewDecision",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "decision",
                    models.CharField(
                        choices=[
                            ("include", "Include"),
                            ("exclude", "Exclude"),
                            ("maybe", "Maybe/Uncertain"),
                            ("pending", "Pending Review"),
                        ],
                        default="pending",
                        help_text="Review decision",
                        max_length=20,
                    ),
                ),
                (
                    "exclusion_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_grey_lit", "Not Grey Literature"),
                            ("wrong_population", "Wrong Population"),
                            ("wrong_intervention", "Wrong Intervention/Interest"),
                            ("wrong_context", "Wrong Context"),
                            ("wrong_language", "Wrong Language"),
                            ("duplicate", "Duplicate"),
                            ("quality", "Quality Concerns"),
                            ("access", "Cannot Access"),
                            ("date_range", "Outside Date Range"),
                            ("other", "Other"),
                        ],
                        help_text="Reason for exclusion (if excluded)",
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.IntegerField(
                        default=3,
                        help_text="Reviewer confidence (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "needs_second_review",
                    models.BooleanField(
                        default=False, help_text="Flag for second reviewer"
                    ),
                ),
                (
                    "reviewer_notes",
                    models.TextField(
                        blank=True, help_text="Detailed notes about the decision"
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the review was completed"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "result",
                    models.OneToOneField(
                        help_text="The result being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_decision",
                        to="results_manager.processedresult",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        help_text="User who made this decision",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "review_decisions",
                "ordering": ["-reviewed_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "comment_type",
                    models.CharField(
                        choices=[
                            ("general", "General Comment"),
                            ("quality", "Quality Assessment"),
                            ("relevance", "Relevance Discussion"),
                            ("methodology", "Methodology Note"),
                            ("question", "Question"),
                            ("suggestion", "Suggestion"),
                        ],
                        default="general",
                        help_text="Type of comment",
                        max_length=20,
                    ),
                ),
                ("content", models.TextField(help_text="Comment content")),
                (
                    "is_resolved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this comment/issue is resolved",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False, help_text="Pin important comments"
                    ),
                ),
                (
                    "is_edited",
                    models.BooleanField(
                        default=False, help_text="Whether comment has been edited"
                    ),
                ),
                (
                    "edited_at",
                    models.DateTimeField(
                        blank=True, help_text="When comment was last edited", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Comment author",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mentioned_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users mentioned in this comment",
                        related_name="comment_mentions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent comment for threading",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="review_results.reviewcomment",
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The result being commented on",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="review_comments",
                        to="results_manager.processedresult",
                    ),
                ),
            ],
            options={
                "db_table": "review_comments",
                "ordering": ["result", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReviewTagAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        default=1.0, help_text="Confidence in tag assignment (0-1)"
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        blank=True,
                        help_text="Brief note about why tag was assigned",
                        max_length=255,
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        help_text="User who assigned this tag",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "result",
                    models.ForeignKey(
                        help_text="The result being tagged",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tag_assignments",
                        to="results_manager.processedresult",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        help_text="The tag being assigned",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="review_results.reviewtag",
                    ),
                ),
            ],
            options={
                "db_table": "review_tag_assignments",
                "ordering": ["-assigned_at"],
                "indexes": [
                    models.Index(
                        fields=["result", "tag"], name="review_tag__result__24641a_idx"
                    ),
                    models.Index(fields=["tag"], name="review_tag__tag_id_d354fe_idx"),
                ],
                "unique_together": {("result", "tag")},
            },
        ),
        migrations.AddIndex(
            model_name="reviewtag",
            index=models.Index(
                fields=["tag_type"], name="review_tags_tag_typ_7b4804_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewtag",
            index=models.Index(fields=["slug"], name="review_tags_slug_e00830_idx"),
        ),
        migrations.AddIndex(
            model_name="reviewdecision",
            index=models.Index(
                fields=["decision"], name="review_deci_decisio_c66b50_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewdecision",
            index=models.Index(
                fields=["reviewer", "reviewed_at"],
                name="review_deci_reviewe_4c3db5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="reviewdecision",
            index=models.Index(
                fields=["needs_second_review"], name="review_deci_needs_s_12596e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewcomment",
            index=models.Index(
                fields=["result", "created_at"], name="review_comm_result__8048c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewcomment",
            index=models.Index(
                fields=["author"], name="review_comm_author__c341b3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reviewcomment",
            index=models.Index(
                fields=["is_resolved"], name="review_comm_is_reso_2c2132_idx"
            ),
        ),
    ]
