# Generated by Django 4.2.11 on 2025-07-25 01:17

import uuid
from decimal import Decimal

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("review_manager", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("search_strategy", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SearchExecution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("rate_limited", "Rate Limited"),
                        ],
                        default="pending",
                        help_text="Current status of the execution",
                        max_length=20,
                    ),
                ),
                (
                    "search_engine",
                    models.CharField(
                        default="google",
                        help_text="Search engine used (e.g., google, bing)",
                        max_length=50,
                    ),
                ),
                (
                    "api_request_id",
                    models.CharField(
                        blank=True,
                        help_text="External API request ID for tracking",
                        max_length=255,
                    ),
                ),
                (
                    "api_parameters",
                    models.JSONField(
                        default=dict, help_text="Parameters sent to the API"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When execution started", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When execution completed", null=True
                    ),
                ),
                (
                    "duration_seconds",
                    models.FloatField(
                        blank=True, help_text="Execution duration in seconds", null=True
                    ),
                ),
                (
                    "results_count",
                    models.IntegerField(
                        default=0, help_text="Number of results returned"
                    ),
                ),
                (
                    "results_offset",
                    models.IntegerField(
                        default=0, help_text="Offset for paginated results"
                    ),
                ),
                (
                    "api_credits_used",
                    models.IntegerField(
                        default=0, help_text="Number of API credits consumed"
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.00"),
                        help_text="Estimated cost in USD",
                        max_digits=10,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if execution failed"
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of retry attempts"
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Celery task ID for async execution",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "initiated_by",
                    models.ForeignKey(
                        help_text="User who initiated this execution",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        help_text="The search query being executed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="search_strategy.searchquery",
                    ),
                ),
            ],
            options={
                "db_table": "search_executions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RawSearchResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        help_text="Position in search results (1-based)"
                    ),
                ),
                ("title", models.TextField(help_text="Title of the search result")),
                (
                    "link",
                    models.URLField(help_text="URL of the result", max_length=2048),
                ),
                (
                    "snippet",
                    models.TextField(
                        blank=True, help_text="Text snippet from the result"
                    ),
                ),
                (
                    "display_link",
                    models.CharField(
                        blank=True,
                        help_text="Display version of the URL",
                        max_length=255,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Source website or platform",
                        max_length=255,
                    ),
                ),
                (
                    "raw_data",
                    models.JSONField(
                        default=dict, help_text="Complete raw response from API"
                    ),
                ),
                (
                    "has_pdf",
                    models.BooleanField(
                        default=False, help_text="Whether result links to a PDF"
                    ),
                ),
                (
                    "has_date",
                    models.BooleanField(
                        default=False,
                        help_text="Whether a publication date was detected",
                    ),
                ),
                (
                    "detected_date",
                    models.DateField(
                        blank=True,
                        help_text="Extracted publication date if available",
                        null=True,
                    ),
                ),
                (
                    "is_academic",
                    models.BooleanField(
                        default=False, help_text="Whether result appears to be academic"
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True, help_text="Detected language code", max_length=10
                    ),
                ),
                (
                    "is_processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this result has been processed",
                    ),
                ),
                (
                    "processing_error",
                    models.TextField(
                        blank=True, help_text="Error message if processing failed"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "execution",
                    models.ForeignKey(
                        help_text="The execution that produced this result",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="raw_results",
                        to="serp_execution.searchexecution",
                    ),
                ),
            ],
            options={
                "db_table": "raw_search_results",
                "ordering": ["execution", "position"],
            },
        ),
        migrations.CreateModel(
            name="ExecutionMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "total_executions",
                    models.IntegerField(
                        default=0, help_text="Total number of executions"
                    ),
                ),
                (
                    "successful_executions",
                    models.IntegerField(
                        default=0, help_text="Number of successful executions"
                    ),
                ),
                (
                    "failed_executions",
                    models.IntegerField(
                        default=0, help_text="Number of failed executions"
                    ),
                ),
                (
                    "total_results_retrieved",
                    models.IntegerField(
                        default=0,
                        help_text="Total results retrieved across all executions",
                    ),
                ),
                (
                    "unique_results",
                    models.IntegerField(
                        default=0,
                        help_text="Number of unique results (after deduplication)",
                    ),
                ),
                (
                    "average_execution_time",
                    models.FloatField(
                        blank=True,
                        help_text="Average execution time in seconds",
                        null=True,
                    ),
                ),
                (
                    "total_api_credits",
                    models.IntegerField(
                        default=0, help_text="Total API credits consumed"
                    ),
                ),
                (
                    "total_estimated_cost",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.00"),
                        help_text="Total estimated cost in USD",
                        max_digits=10,
                    ),
                ),
                (
                    "academic_results_count",
                    models.IntegerField(
                        default=0, help_text="Number of academic results found"
                    ),
                ),
                (
                    "pdf_results_count",
                    models.IntegerField(
                        default=0, help_text="Number of PDF results found"
                    ),
                ),
                (
                    "rate_limit_hits",
                    models.IntegerField(
                        default=0, help_text="Number of times rate limited"
                    ),
                ),
                (
                    "last_rate_limit",
                    models.DateTimeField(
                        blank=True, help_text="Last time rate limited", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_execution",
                    models.DateTimeField(
                        blank=True, help_text="Timestamp of last execution", null=True
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        help_text="The search session these metrics belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_metrics",
                        to="review_manager.searchsession",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Execution metrics",
                "db_table": "execution_metrics",
            },
        ),
        migrations.AddIndex(
            model_name="searchexecution",
            index=models.Index(
                fields=["query", "status"], name="search_exec_query_i_d5c826_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="searchexecution",
            index=models.Index(
                fields=["status", "created_at"], name="search_exec_status_ded253_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="searchexecution",
            index=models.Index(
                fields=["celery_task_id"], name="search_exec_celery__30454b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawsearchresult",
            index=models.Index(
                fields=["execution", "position"], name="raw_search__executi_c9d182_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawsearchresult",
            index=models.Index(
                fields=["is_processed"], name="raw_search__is_proc_aa14e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawsearchresult",
            index=models.Index(fields=["link"], name="raw_search__link_56258d_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="rawsearchresult",
            unique_together={("execution", "position")},
        ),
    ]
